<snippet>
    <content><![CDATA[//https://ide.codingblocks.com/s/4399
        //SEGMENT TREE
//STEP1:-BUILD
//STEP2:-QUERY
//STEP 3:-UPDATE
//STEP 4:-RANGE UPDATE
//STEP 5:-LAZY UPDATE
/*/-----


    Written By:- Sajal Agrawal
          (Have Patience)

/*/
#include<bits/stdc++.h>
using namespace std;
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
#define ll long long int
#define f(i,a,b) for(ll i=a;i<b;i++)
#define mod 1000000007
#define fi first
#define se second
#define pa pair <ll,ll>
#define mp make_pair
#define c(t) cout<<t<<"\n"
#define pb push_back
#define endl '\n'
void build(ll *a,ll st,ll ed,ll *tree,ll index){
if(st==ed){
  tree[index]=a[st];
  return;
}
ll mid=(st+ed)/2;
build(a,st,mid,tree,2*index+1);
build(a,mid+1,ed,tree,2*index+2);

tree[index]=min(tree[2*index+1],tree[2*index+2]);

}
ll query(ll *tree,ll st,ll se,ll qs,ll qe,ll index){

//if complete overlap return
  if(qs<=st&&qe>=se){
    return tree[index]; 
  }
  //for no overlap
  if(se<qs||qe<st){
    return INT_MAX;
  }

ll mid=(st+se)/2;
ll leftans=query(tree,st,mid,qs,qe,2*index+1);
ll rightans=query(tree,mid+1,se,qs,qe,2*index+2);

return min(rightans,leftans);



}

void updatetree(ll *tree,ll st,ll  ed,ll i,ll incr,ll index){
//same as build
  //for no overlaap return
  //step1:-
  if(i<st||i>ed){
    return;
  }

//step2:-always put leaf node after no overlap
  if(st==ed){
    //means we are at leaf ans atour required node for increment
    tree[index]+=incr;
    return;
  }



  //else partial overlap
ll mid=(st+ed)/2;
updatetree(tree,st,mid,i,incr,2*index+1);
updatetree(tree,mid+1,ed,i,incr,2*index+2);
tree[index]=min(tree[2*index+1],tree[2*index+2]);

return;






}

void updaterange(ll *tree,ll st,ll ed,ll us,ll ue,ll incr,ll index){
  //Out of bounds 
if(ed<us||st>ue){
  return;
}
    // Leaf Node 
if(st==ed){
tree[index]+=incr;
return ;
}
  // Left and Right  Call Otherwise 
ll mid=(st+ed)/2;
updaterange(tree,st,mid,us,ue,incr,2*index+1);
updaterange(tree,mid+1,ed,us,ue,incr,2*index+2);
//we can add here moe ontimization but it is not very useful
tree[index]=min(tree[2*index+1],tree[2*index+2]);

return;

}



int main(){

ll n;
cin>>n;
ll *a=new ll[n];
f(i,0,n){
  cin>>a[i];
}

ll *tree=new ll[4*n+1];
//step1
build(a,0,n-1,tree,0);
/*

for(ll x=0;x<2*n+1;x++){
 cout<<tree[x]<<" ";   
}*/
cout<<endl;

//step2
ll l,r;cin>>l>>r;
cout<<query(tree,0,n-1,l,r,0)<<endl;


//step 4
cout<<" enter the index of update and the increment value"<<endl;
ll i,p;
cin>>i>>l;
updatetree(tree,0,n-1,i,p,0);
/*
6
1 3 2 -5 6 4
0 3

*/

//step4
ll us,ue,incr;cin>>us>>ue>>incr;
updaterange(tree,0,n-1,us,ue,incr,0);


}

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>segmenttree_full_code</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
