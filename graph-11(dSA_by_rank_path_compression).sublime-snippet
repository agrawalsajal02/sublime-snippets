<snippet>
    <content><![CDATA[//includes rank and path compression
//tc is o(m*alppha) where m is make set operatios
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
vector<ll>v[10000];
vector<pair<ll,ll> >e;
ll *parent=new ll[10000]; 
bool visi[100000];
ll *rank_dsa=new ll[10000];
//rank means height of tree , if x>y then move y under x and height remain  same as x since y<x and vice versa 
//if same rank , then move y under x , make height increase by 1
//tc is o(alpha) fro find function , alpha is <=4
ll findparent(ll *parent,ll i){
  if(parent[i]!=i){
    parent[i]=findparent(parent,parent[i]);
  }
  return parent[i];
  //path compression
  /*
           ll j=find(parent[i])
        //Path Compression Heuristics
        parent[i]=j
        return j  return so that baki ke child node jo 
        stack me he unka bhi parent root ban jaye
  ye recursion root ke value node me laga dega       

  */
}

ll Make_Union(ll sor,ll des){
  ll x_set=findparent(parent,sor);
  ll y_set=findparent(parent,des);
  if(rank_dsa[x_set]>rank_dsa[y_set]){
    parent[y_set]=x_set;
  }
  else if(rank_dsa[x_set]<rank_dsa[y_set]){
parent[x_set]=y_set;
  }
  else{
parent[y_set]=x_set;
rank_dsa[x_set]++;
  }
  
}
ll find_cycle(ll n,ll E){
//define parent array;
for(ll i=0;i<n;i++){
      parent[i]=i;
      rank_dsa[i]=0; 
   } 
for(ll i=0;i<E;i++){
  ll sour=e[i].first;
  ll dest=e[i].second;
  ll source_parent=findparent(parent,sour);
  ll dest_parent=findparent(parent,dest);
  if(source_parent==dest_parent){
    return 1;
  }
//  cout<<"v "<<sour<<" "<<dest<<" "<<endl;
  //cout<<"p "<<source_parent<<" "<<dest_parent<<endl;
  Make_Union(sour,dest);


}
return 0;
}
int main(){

ll n,E;cin>>n>>E;
for(ll i=0;i<E;i++){
ll a,b;cin>>a>>b;
e.push_back({a,b});
}

if(find_cycle(n,E)){
  cout<<"having cycle"<<endl;
}
else{
  cout<<"not having cycle"<<endl;
}

/*
5 5
0 1
0 2
1 3
2 4
3 4


*/

}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>graph-11(dSA_by_rank_path_compression)</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
