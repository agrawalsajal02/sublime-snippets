<snippet>
    <content><![CDATA[/*
 * 0/1 Knapsack Problem - Given items of certain weights/values and maximum allowed weight
 * how to pick items to pick items from this set to maximize sum of value of items such that
 * sum of weights is less than or equal to maximum allowed weight.
 * Time complexity - O(W*total items)
*/
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define f(i,a,b) for(ll (i)=(a);(i)<(b);(i)++)
#define fi first
#define se second
int main(){
ll wei,n;
cin>>wei>>n;
ll val[n+1];
ll weight[n+1];
val[0]=0;weight[0]=0;
f(i,1,n+1){
  ll x,y;
  cin>>x>>y;
  val[i]=y;
  weight[i]=x;
}
ll dp[n+1][wei+1];
f(i,0,n+1){
  f(j,0,wei+1){
    dp[i][j]=0;
  }
}
for(ll i=0;i<=n;i++){
  for(ll j=0;j<=wei;j++){
    if (i == 0 || j == 0){ 
                dp[i][j] = 0;
continue;
     } 
    if(j-weight[i]<0){
     dp[i][j]=dp[i-1][j];
    }
    else{
     dp[i][j]=max(dp[i-1][j],val[i]+dp[i-1][j-weight[i]]);
    }
  }
}
/*
f(i,0,n+1){
  f(j,0,wei+1){
    cout<<dp[i][j]<<" ";
  }cout<<endl;
}cout<<endl;

*/

//backtrackng the solution
vector<ll>v;
ll j=wei;
for(ll i=n;i>=1;i--){
  if(dp[i][j]==dp[i-1][j]){
    //means current item is not taken , just go to upwards
  continue;
  }
  else{
j=j-weight[i];
v.push_back(i);
  }
}
cout<<" items are "<<endl;
f(i,0,v.size()){
  cout<<val[v[i]]<<" ";
}cout<<endl;
cout<<" final ans "<<endl;
cout<<dp[n][wei]<<endl;
}]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>dp-15(knapsack(0/1)/_bottom_up)</tabTrigger> 
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
