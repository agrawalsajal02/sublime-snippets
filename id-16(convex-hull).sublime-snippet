<snippet>
    <content><![CDATA[
        //jarvis algo (o(n square))
        #include<bits/stdc++.h>
using namespace std;
#define ll long long int
struct point{
ll x,y;
};
ll orientation(point p,point q,point r){
ll val=(q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);
if(val==0)return 0;
if(val>0)return 1;
else{
    return 2;
  }
}
void convexhull(point points[],ll n){
  if(n<3){
    cout<<"not possible"<<endl;
    return ;
  }
  vector<point>hull;
  ll l=0;
  for(ll i=1;i<n;i++){
  if(points[i].x<points[l].x){
    l=i;
  }
  }
  ll p=l,q;
  do{
   hull.push_back(points[p]);
    q=(p+1)%n;
    for(ll i=0;i<n;i++){
      if(orientation(points[p],points[i],points[q])==2){
        q=i;
      }
    }
    p=q;
  }while(p!=l);

for(ll i=0;i<hull.size();i++){
cout<<"("<<hull[i].x<<","<<hull[i].y<<")"<<endl;

}

}


int main(){

point points[]={
  {0,3},{2,2},{1,1},{2,1},{3,0},{0,0},{3,3}
};
ll n=sizeof(points)/sizeof(points[0]);
convexhull(points,n);
return 0;



}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>id-16(convex-hull)</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
