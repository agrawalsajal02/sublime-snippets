<snippet>
    <content><![CDATA[#include<iostream>
#include<vector>
#include<map>
using namespace std;
#define ll long long
#include<deque>
#define max 15
map<deque<ll> , ll>ma;
#define f(i,a,b) for(ll (i)=(a);(i)<(b);(i)++)
bool is_safe(char place[max][max],ll i,ll j,ll n){
for(ll k=0;k<i;k++){
  if(place[k][j]=='Q'){
    return false;
  }
}
ll x=i;
ll y=j;
while(x>=0&&y>=0){
if(place[x][y]=='Q')return false;
  x--;
  y--;

}
 x=i;
 y=j;
while(x>=0&&y<n){
if(place[x][y]=='Q')return false;
  x--;
  y++;

}
return true;
}
vector<string>v;
bool n_queen(char place[max][max],ll i,ll n,deque<ll>d){
if(i==n){
  //print
  ma[d]++;
/*f(k,0,n){
  f(j,0,n){
    cout<<place[k][j]<<" ";
  }cout<<endl;
}cout<<endl<<endl;
  */return false;
}
if(i<0||i>n){
  return false;
}
for(ll j=0;j<n;j++){
if(is_safe(place,i,j,n)){
place[i][j]='Q';
d.push_back(j+1);
bool check=n_queen(place,i+1,n,d);
if(check){
  return true;
}
place[i][j]='.';
d.pop_back();
}
}

return false;

}
int main(){
ll t;
cin>>t;
while(t--){
ll n;
cin>>n;
char place[max][max];
f(i,0,n){
  f(j,0,n){
    place[i][j]='.';
  }
}
deque<ll>d;
n_queen(place,0,n,d);

if(ma.size()==0){
cout<<"-1"<<endl;
ma.clear();
continue;
}
for(auto it=ma.begin();it!=ma.end();it++){
  deque<ll> q=it->first;
  cout<<"[";
for(ll j=0;j<q.size();j++){
  cout<<q[j]<<" ";
}cout<<"] ";
}
cout<<endl;
ma.clear();
}

}]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
     <tabTrigger>backtracking-2(n_queen)</tabTrigger> 
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
