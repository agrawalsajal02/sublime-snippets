<snippet>
    <content><![CDATA[  #include<bits/stdc++.h>
  using namespace std;
  #define ll long long int
  #define f(i,a,b) for(ll (i)=(a);(i)<(b);(i)++)
  typedef pair<ll, ll> pa;
  vector< pair<ll,ll> >v[1000000];
  vector<ll>weight(1000000,INT_MAX);
  vector<ll>parent(1000000,-1);
vector<bool>visited(1000000,0);

  void prims(ll n,ll e){
  ll src=0;
  set<  pa > s;
weight[src]=0;parent[src]=-1;
s.insert({0,src});
f(i,1,n){
s.insert({INT_MAX,i});
}
for(ll i=0;i<n;i++){
    ll fin_min=(*s.begin()).second;
    s.erase(s.begin());
    visited[fin_min]=1;
    for(auto j:v[fin_min]){
        ll V=j.first;
        ll wei=j.second;
        if(!visited[V]&&wei<weight[V]){
        s.erase({weight[V],V});
       weight[V]=wei;
        s.insert({weight[V],V});
        }
    }
}

  ll sum=0;
  for(ll i=1;i<n;i++){
  //cout<<i<<" "<<parent[i]<<" "<<weight[i]<<endl;
  sum=sum+weight[i];
  }


    cout<<sum<<endl;
  }
  int main(){

        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
  ll n,e;
  cin>>n>>e;
  for(ll i=0;i<e;i++){
    ll x,y,weight;
    cin>>x>>y>>weight;
    x--;
    y--;
    v[x].push_back({y,weight});
    v[y].push_back({x,weight});
  }
  prims(n,e);


  }]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>graph-31(prims_mst_set_working_code)</tabTrigger> 
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
