<snippet>
    <content><![CDATA[//O(eLOGV)
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
template <class T>
class Graph{
public:
    unordered_map<T,vector< pair < T,ll > > >m;
void addedge(T u,T v,ll dis){
    m[u].push_back({v,dis});
    m[v].push_back({u,dis});
}
void dijkstra(T node){
    unordered_map<T,ll>dis_map;
    //initailly set all dis to inf
    for(auto j:m){
        dis_map[j.first]=INT_MAX;
    }
    map<T,T>parent;
    parent[node]=node;
//mak a set to find out node with min distance
//sorting acc to first parameter,want sort acc to distance
    set< pair< ll, T > >s;
dis_map[node] = 0;
s.insert({0,node});
while(!s.empty()){
    //find the pair at front
pair<ll,T>p=*(s.begin());
T ver=p.second;
ll nodedistance=p.first;
//erase this node ,dis ha been finalized
s.erase(s.begin());

//iterate over neighbour of current node , children of current node

for(auto child:m[ver]){
    T neigh=child.first;

if(nodedistance+child.second<dis_map[neigh]){
  //pop out the neigh from set
    //change value
    //then again insert
 //first find whether the neih is alredy vis or not
 auto f=s.find({dis_map[neigh],neigh});
//agar koi node ek bar bhi set me nhi dala he to vo frist time find nhi karega , therefore no erase
if(f!=s.end()){
//agar koi node ek bar bhi set me bhi dala he tabi remove kare
s.erase(f);
}
//insert a new pair
dis_map[neigh]=nodedistance+child.second;
s.insert({dis_map[neigh],neigh});
parent[neigh]=ver;


}  
}






}



    for(auto d:dis_map ){
        cout<<d.first<<" is located at dis "<<d.second<<endl;
    }cout<<endl<<endl;
for(auto p:parent){
    cout<<p.second<<" is parent of "<<p.first<<endl;
}

}
void printadj(){
    for(auto j:m){
        cout<<j.first<<" --> ";
        for(auto i:j.second){
            cout<<"("<<i.first<<","<<i.second<<") ";
        }
    }cout<<endl;
}
};

int main(){

Graph <ll>g1;
g1.addedge(1,2,1);
g1.addedge(1,3,4);
g1.addedge(1,4,7);
g1.addedge(2,3,2);
g1.addedge(3,4,2);

g1.dijkstra(1);
cout<<endl<<endl;
Graph <string>india;
india.addedge("Amritsar","delhi",1);
india.addedge("Amritsar","jaipur",4);
india.addedge("jaipur","delhi",2);
india.addedge("jaipur","mumbai",8);
india.addedge("bhopal","agra",2);
india.addedge("mumbai","bhopal",3);
india.addedge("agra","delhi",1);
india.dijkstra("Amritsar");






}

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>graph-15(dijkstra algo(elogv using set))</tabTrigger> -->
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
