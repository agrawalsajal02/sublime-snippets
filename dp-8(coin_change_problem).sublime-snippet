<snippet>
    <content><![CDATA[//coin change problem
/*
1)min coin needed to form a value(coin value is predefined)
2)total number of ways to form the value(given coin values)
/*
for total number of ways 1,3 and 3,1 counted as 2 ways

this is part 1
*/
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
ll calls=0;
ll coin_change(ll a[],ll n,ll p){
//base cases
calls++;
if(p==0){
    return 0;
}
if(p<0){
    return 0;
}
//rec case
ll sum=INT_MAX;
    for(ll i=0;i<n;i++){
        if(p-a[i]>=0)
        sum=min(sum,coin_change(a,n,p-a[i]));   
    }

return sum+1;
}
//dp solution
ll dp[1000]={};
ll cal=0;
ll coin_change_dp(ll a[],ll n,ll p){
//base cases
cal++;
if(p==0){
    return 0;
}
if(p<0){
    return 0;
}
//rec case
if(dp[p]!=-1){
    return dp[p];
}
ll sum=INT_MAX;
    for(ll i=0;i<n;i++){
        if(p-a[i]>=0)
        sum=min(sum,coin_change_dp(a,n,p-a[i]));   
    }

return dp[p]=sum+1;

}
int main(){
    for(ll i=0;i<1;i++){
ll n;
cin>>n;ll a[n];
for(ll j=0;j<n;j++){
    cin>>a[j];
}
ll p;cin>>p;
memset(dp,-1,sizeof(dp));
cout<<coin_change(a,n,p)<<endl;
cout<<" calls "<<calls<<endl<<"-------------"<<endl;
cout<<coin_change_dp(a,n,p)<<endl;
cout<<" calls after dp "<<endl;
cout<<cal<<endl;

    }





}

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>dp-8(coin_change_problem)</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
