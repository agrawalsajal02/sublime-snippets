<snippet>
    <content><![CDATA[#include<bits/stdc++.h>
using namespace std;
//one state represent minimum number of operation to convert one strintg to another
//row side string to column side string
/*
think recursive solution with memorization
*/
#define ll long long int
ll edit_dist(char inp[100],char out[100]){
    ll dp[101][101]={};
    ll m=  strlen(inp); //jiski change karna he (vertical)
    ll n=  strlen(out);//jisme change karna he(horizontal)
     for(ll i=1;i<=n;i++){
            dp[0][i]=dp[0][i-1]+1;//insertion
        }   
      for(ll j=1;j<=n;j++){
           dp[j][0]=dp[j-1][0]+1;//deletion 
        }
      for(ll i=1;i<=m;i++){
           for(ll j=1;j<=n;j++){
                  ll q1=dp[i-1][j-1]+1;//replacement
                  ll q2=dp[i-1][j]+1;//  deletion
                  ll q3=dp[i][j-1]+1; //insertion
                  if(inp[i-1]==out[j-1]){
                    dp[i][j]=dp[i-1][j-1];
                    continue;
                  }
                  dp[i][j]=min(q1,min(q2,q3));

              }   
          }

          for(ll x=0;x<=m;x++){
           for(ll w=0;w<=n;w++){
                  cout<<dp[x][w]<<" ";
              }   cout<<endl;
          }cout<<endl;
          cout<<" the ans is "<<endl;
          return dp[m][n];    
}
int main(){
char inp[100],out[100];

cin>>inp>>out;

ll ans=edit_dist(inp,out);
cout<<ans<<endl;
/*
sunday
saturday
:-3
0 1 2 3 4 5 6 7 8 
1 0 1 2 3 4 5 6 7 
2 1 1 2 2 3 4 5 6 
3 2 2 2 3 3 4 5 6 
4 3 3 3 3 4 3 4 5 
5 4 3 4 4 4 4 3 4 
6 5 4 4 5 5 5 4 3  <-- ans


cast
cats
2

cats
cat
1
*/

}]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>dp-4(Edit_distance)</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
