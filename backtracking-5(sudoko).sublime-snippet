<snippet>
    <content><![CDATA[//solve the sudoku
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define f(i,a,b) for(ll (i)=(a);(i)<(b);(i)++)
ll a[9][9];
bool is_saf(ll a[9][9],ll num,ll i,ll j){
for(ll k=0;k<9;k++){
    if(a[k][j]==num){
        return false;
    }
}
for(ll k=0;k<9;k++){
    if(a[i][k]==num){
        return false;
    }
}
ll xx=(i/3)*3;
ll yy=(j/3)*3;

for(ll y=xx;y<xx+3;y++){
    for(ll w=yy;w<yy+3;w++){
if(a[y][w]==num){
    return false;
    }
}
}
return true;
}
bool backtrackit(ll i,ll j){
if(i==9){
f(k,0,9){
f(p,0,9){
cout<<a[k][p]<<" ";
}
}

return true;
}
   if(j==9){
    return backtrackit(i+1,0);
   } 
if(a[i][j]!=0){
    return backtrackit(i,j+1);
}

for(ll k=1;k<=9;k++){
    if(is_saf(a,k,i,j)){
        a[i][j]=k;
        bool nextstateparjapahega=backtrackit(i,j+1);
    if(nextstateparjapahega)return true;

a[i][j]=0;
    }
}
return false;

}
int main(){
ll t;
cin>>t;
while(t--){
f(i,0,9){
    f(j,0,9){
        cin>>a[i][j];
    }
}

backtrackit(0,0);
cout<<endl;
}
/*
1
5 3 0 0 7 0 0 0 0
6 0 0 1 9 5 0 0 0
0 9 8 0 0 0 0 6 0
8 0 0 0 6 0 0 0 3
4 0 0 8 0 3 0 0 1
7 0 0 0 2 0 0 0 6
0 6 0 0 0 0 2 8 0
0 0 0 4 1 9 0 0 5
0 0 0 0 8 0 0 7 9

1
3 0 6 5 0 8 4 0 0
5 2 0 0 0 0 0 0 0
0 8 7 0 0 0 0 3 1
0 0 3 0 1 0 0 8 0
9 0 0 8 6 3 0 0 5
0 5 0 0 9 0 6 0 0
1 3 0 0 0 0 2 5 0
0 0 0 0 0 0 0 7 4
0 0 5 2 0 6 3 0 0 


*/

}]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
     <tabTrigger>backtracking-5(sudoko)</tabTrigger> 
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
