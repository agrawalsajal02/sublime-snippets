<snippet>
    <content><![CDATA[//lower bound
/*/-----


    Written By:- Sajal Agrawal
          (Have Patience)

/*/
#include<bits/stdc++.h>
using namespace std;
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
#define ll long long int
#define f(i,a,b) for(ll (i)=(a);(i)<(b);(i)++)
#define rf(i,a,b) for(ll (i)=(a);(i)>=(b);(i)--)
#define mod 1000000007
#define fi first
#define se second
#define pa pair <ll,ll>
#define mp make_pair
#define c(t) cout<<t<<"\n"
#define pb push_back
#define endl '\n'
#define PRI(x) cerr<<#x<<'='<<x<<endl;
#define all(con) con.begin(),con.end()
#define sz(x) ((long long)x.size())
void binarysearch(ll a[],ll n,ll key){
ll l=0,r=n-1;
ll ans=-1;
while(l<=r){
ll mid=(l+r)/2;
if(a[mid]==key){
   ans=mid;
    l=mid+1;
}
else if(a[mid]>key){
r=mid-1;
}
else{
l=mid+1;
}
}


if(ans==-1){
    cout<<"key not found"<<endl;
}
else{
    cout<<"key at index "<<ans<<" :value "<<a[ans]<<endl;
}

}
int main(){
ll n;
cin>>n;ll a[n];
f(i,0,n){
    cin>>a[i];
}
ll key;cin>>key;
binarysearch(a,n,key);cout<<endl;
cout<<" solution by stl "<<endl;
cout<<(upper_bound(a,a+n,key)-a-1);
//upper bound stl copute one index larger than last occurance
}

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
     <tabTrigger>binary_search(last_occurance)</tabTrigger> 
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
